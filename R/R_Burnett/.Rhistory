layoutcoor=read.csv("MATLAB/barley_model/PSPR_coor.csv")
layoutcoor=as.matrix(layoutcoor)
lay=read.csv("MATLAB/barley_model/adjusted_coor2.csv")
lay=as.matrix(lay)
layoutcoor[1:43,]=lay[1:43,]
plot(g1,vertex.shape=g1$shapes,edge.arrow.size=.1,vertex.label.cex=V(g1)$cex,
vertex.label.color=V(g1)$color,vertex.size=0,layout=layoutcoora)
plot(g1,vertex.shape=g1$shapes,edge.arrow.size=.1,vertex.label.cex=V(g1)$cex,
vertex.label.color=V(g1)$color,vertex.size=0,layout=layoutcoor)
layoutcoor=read.csv("MATLAB/barley_model/PSPR_coor.csv")
layoutcoor=as.matrix(layoutcoor)
lay=read.csv("MATLAB/barley_model/adjusted_coor2.csv")
lay=as.matrix(lay)
lay[,2]=lay[,2]+100
layoutcoor[1:43,]=lay[1:43,]
plot(g1,vertex.shape=g1$shapes,edge.arrow.size=.1,vertex.label.cex=V(g1)$cex,
vertex.label.color=V(g1)$color,vertex.size=0,layout=layoutcoor)
lay=read.csv("MATLAB/barley_model/adjusted_coor2.csv")
lay=as.matrix(lay)
lay[,1]=lay[,1]-100
layoutcoor[1:43,]=lay[1:43,]
plot(g1,vertex.shape=g1$shapes,edge.arrow.size=.1,vertex.label.cex=V(g1)$cex,
vertex.label.color=V(g1)$color,vertex.size=0,layout=layoutcoor)
lay=read.csv("MATLAB/barley_model/adjusted_coor2.csv")
lay=as.matrix(lay)
lay[,1]=lay[,1]-500
layoutcoor[1:43,]=lay[1:43,]
plot(g1,vertex.shape=g1$shapes,edge.arrow.size=.1,vertex.label.cex=V(g1)$cex,
vertex.label.color=V(g1)$color,vertex.size=0,layout=layoutcoor)
ecount(g1)
############## FLUX ANALYSIS ###################
E(g1)$reactions=rep('',ecount(g1))
E(g1)$reactions[c(4,8,12,14,17,19,23,26,28,32,34,36,40,42,44,48,50,54,56,58,60,62,66,70,74,78,83,86)]=
c('v1','v2','v3','v4','v5','v6','v7','v8','v9','v10','v11','v12','v13','v21','v22','v23','v24',
'v111','v112','v113','v121','v122','v123','v124','v131','A','photosynthesis')
length(c(4,8,12,14,17,19,23,26,28,32,34,36,40,42,44,48,50,54,56,58,60,62,66,70,74,78,83,86))
length(c('v1','v2','v3','v4','v5','v6','v7','v8','v9','v10','v11','v12','v13','v21','v22','v23','v24',
'v111','v112','v113','v121','v122','v123','v124','v131','A','photosynthesis'))
############## FLUX ANALYSIS ###################
E(g1)$reactions=rep('',ecount(g1))
E(g1)$reactions[c(4,8,12,14,17,19,23,26,28,32,34,36,40,42,44,48,50,54,56,58,60,62,66,70,74,78,83,86)]=
c('v1','v2','v3','v4','v5','v6','v7','v8','v9','v10','v11','v12','v13','v21','v22','v23','v24',
'v111','v112','v2out','v113','v1in','v121','v122','v123','v124','v131','photosynthesis')
PSrate=read.csv("MATLAB/barley_model/PSrate.csv")
PRrate=read.csv("MATLAB/barley_model/PRrate.csv")
PSrate=read.csv("MATLAB/barley_model/PSrate.csv")
PRrate=t(read.csv("MATLAB/barley_model/PRrate.csv"))
PSrate=read.csv("MATLAB/barley_model/PSrate.csv")
PRrate=read.csv("MATLAB/barley_model/PRrate.csv")
PSrate=read.csv("MATLAB/barley_model/PSrate.csv")
PRrate=t(read.csv("MATLAB/barley_model/PRrate.csv"))
View(PRrate)
PSrate=read.csv("MATLAB/barley_model/PSrate.csv",row.names = F)
PSrate=read.csv("MATLAB/barley_model/PSrate.csv")
PRrate=t(read.csv("MATLAB/barley_model/PRrate.csv"))
E(g1)$reactions=rep('',ecount(g1))
E(g1)$reactions[c(4,8,12,14,17,19,23,26,28,32,34,36,40,42,44,48,50,54,56,58,60,62,66,70,74,78,83,86)]=
c('v1','v2','v3','v4','v5','v6','v7','v8','v9','v10','v11','v12','v13','v21','v22','v23','v24',
'v111','v112','v2out','v113','v1in','v121','v122','v123','v124','v131','photosynthesis')
PSrate=read.csv("MATLAB/barley_model/PSrate.csv")
PRrate=t(read.csv("MATLAB/barley_model/PRrate.csv"))
reactions=c('v1','v2','v3','null','v5','v6','v7','v8','v9','v10','v13','v16','v23','v32','v33','Pi','v24',
'v111','v112','v113','v121','v122','v123','v124','v131','v1in','v2out')
PSrate=read.csv("MATLAB/barley_model/PSrate.csv")
PRrate=read.csv("MATLAB/barley_model/PRrate.csv")
rates=cbind(PSrate,PRrate)
rates=rbind(PSrate,PRrate)
flux=rates[,ncol(rates)]
ind1=match(E(g1)$reactions,reactions)
ind1=match(E(g1)$reactions,reactions)
E(g1)$flux=round(flux[ind1],2)
plot(g1,vertex.shape=g1$shapes,edge.arrow.size=.2,vertex.label.cex=V(g1)$cex,
vertex.label.color=V(g1)$color,vertex.size=0,layout=as.matrix(layoutcoor),
edge.label=E(g1)$flux,edge.label.cex=0.8)
plot(g1,vertex.shape=g1$shapes,edge.arrow.size=.2,vertex.label.cex=V(g1)$cex,
vertex.label.color=V(g1)$color,vertex.size=0,layout=as.matrix(layoutcoor),
edge.label=E(g1)$flux,edge.label.cex=0.8,edge.label.color="black")
PSrateEPS=read.csv("MATLAB/barley_model/PSrate_EPS.csv")
PRrateEPS=read.csv("MATLAB/barley_model/PRrate_EPS.csv")
rates=rbind(PSrateEPS,PRrateEPS)
flux=rates[,ncol(rates)]
E(g1)$flux=round(flux[ind1],2)
plot(g1,vertex.shape=g1$shapes,edge.arrow.size=.2,vertex.label.cex=V(g1)$cex,
vertex.label.color=V(g1)$color,vertex.size=0,layout=as.matrix(layoutcoor),
edge.label=E(g1)$flux,edge.label.cex=0.8,edge.label.color="black")
flux=c(flux,(flux[1]-flux[9])*30)
############## FLUX ANALYSIS ###################
E(g1)$reactions=rep('',ecount(g1))
E(g1)$reactions[c(4,8,12,14,17,19,23,26,28,32,34,36,40,42,44,48,50,54,56,58,60,62,66,70,74,78,83,86)]=
c('v1','v2','v3','v4','v5','v6','v7','v8','v9','v10','v11','v12','v13','v21','v22','v23','v24',
'v111','v112','v2out','v113','v1in','v121','v122','v123','v124','v131','photosynthesis')
PSrate=read.csv("MATLAB/barley_model/PSrate.csv")
PRrate=read.csv("MATLAB/barley_model/PRrate.csv")
rates=rbind(PSrate,PRrate)
reactions=c('v1','v2','v3','null','v5','v6','v7','v8','v9','v10','v13','v16','v23','v32','v33','Pi','v24',
'v111','v112','v113','v121','v122','v123','v124','v131','v1in','v2out','photosynthesis')
flux=rates[,ncol(rates)]
flux=c(flux,(flux[1]-flux[9])*30)
ind1=match(E(g1)$reactions,reactions)
E(g1)$flux=round(flux[ind1],2)
plot(g1,vertex.shape=g1$shapes,edge.arrow.size=.2,vertex.label.cex=V(g1)$cex,
vertex.label.color=V(g1)$color,vertex.size=0,layout=as.matrix(layoutcoor),
edge.label=E(g1)$flux,edge.label.cex=0.8,edge.label.color="black")
flux[9]
flux
17+9
flux[26]
flux=rates[,ncol(rates)]
flux=c(flux,(flux[1]-flux[26])*30)
ind1=match(E(g1)$reactions,reactions)
E(g1)$flux=round(flux[ind1],2)
plot(g1,vertex.shape=g1$shapes,edge.arrow.size=.2,vertex.label.cex=V(g1)$cex,
vertex.label.color=V(g1)$color,vertex.size=0,layout=as.matrix(layoutcoor),
edge.label=E(g1)$flux,edge.label.cex=0.8,edge.label.color="black")
(flux[1]-flux[26])*30
flux=rates[,ncol(rates)]
flux=c(flux,(flux[1]-flux[26])*30)
ind1=match(E(g1)$reactions,reactions)
E(g1)$flux=round(flux[ind1],2)
plot(g1,vertex.shape=g1$shapes,edge.arrow.size=.2,vertex.label.cex=V(g1)$cex,
vertex.label.color=V(g1)$color,vertex.size=0,layout=as.matrix(layoutcoor),
edge.label=E(g1)$flux,edge.label.cex=0.8,edge.label.color="black")
ind1=match(E(g1)$reactions,reactions)
ind1
rates[28]
E(g1)$flux[28]
flux
E(g1)$flux
ind1=match(reactions,E(g1)$reactions)
E(g1)$flux=round(flux[ind1],2)
flux[28]
flux=rates[,ncol(rates)]
flux=c(flux,(flux[1]-flux[26])*30)
length(flux)
reactions=c('v1','v2','v3','null','v5','v6','v7','v8','v9','v10','v13','v16','v23','v32','v33','Pi','v24',
'v111','v112','v113','v121','v122','v123','v124','v131','v1in','v2out','photosynthesis')
length(reactions)
flux=rates[,ncol(rates)]
length(reactions)
c('v1','v2','v3','v4','v5','v6','v7','v8','v9','v10','v11','v12','v13','v21','v22','v23','v24')
length(c('v1','v2','v3','v4','v5','v6','v7','v8','v9','v10','v11','v12','v13','v21','v22','v23','v24'))
rates=rates[-17,]
PSrate=read.csv("MATLAB/barley_model/PSrate.csv")
PRrate=read.csv("MATLAB/barley_model/PRrate.csv")
rates=rbind(PSrate,PRrate)
reactions=c('v1','v2','v3','null','v5','v6','v7','v8','v9','v10','v13','v16','v23','v32','v33','v24',
'v111','v112','v113','v121','v122','v123','v124','v131','v1in','v2out','photosynthesis')
rates=rates[-17,]
flux=rates[,ncol(rates)]
flux=c(flux,(flux[1]-flux[26])*30)
ind1=match(reactions,E(g1)$reactions)
E(g1)$flux=round(flux[ind1],2)
ind1=match(E(g1)$reactions,reactions)
E(g1)$flux=round(flux[ind1],2)
plot(g1,vertex.shape=g1$shapes,edge.arrow.size=.2,vertex.label.cex=V(g1)$cex,
vertex.label.color=V(g1)$color,vertex.size=0,layout=as.matrix(layoutcoor),
edge.label=E(g1)$flux,edge.label.cex=0.8,edge.label.color="black")
flux
ind1
PSrate=read.csv("MATLAB/barley_model/PSrate.csv")
PRrate=read.csv("MATLAB/barley_model/PRrate.csv")
rates=rbind(PSrate,PRrate)
reactions=c('v1','v2','v3','null','v5','v6','v7','v8','v9','v10','v13','v16','v23','v32','v33','v24',
'v111','v112','v113','v121','v122','v123','v124','v131','v1in','v2out','photosynthesis')
rates=rates[-17,]
flux=rates[,ncol(rates)]
flux=c(flux,(flux[1]-flux[26])*30)
ind1=match(E(g1)$reactions,reactions)
ind1
length(reactions)
E(g1)$reactions=rep('',ecount(g1))
E(g1)$reactions[c(4,8,12,14,17,19,23,26,28,32,34,36,40,42,44,48,50,54,56,58,60,62,66,70,74,78,83,86)]=
c('v1','v2','v3','v4','v5','v6','v7','v8','v9','v10','v11','v12','v13','v21','v22','v23','v24',
'v111','v112','v2out','v113','v1in','v121','v122','v123','v124','v131','photosynthesis')
PSrate=read.csv("MATLAB/barley_model/PSrate.csv")
PRrate=read.csv("MATLAB/barley_model/PRrate.csv")
rates=rbind(PSrate,PRrate)
reactions=c('v1','v2','v3','null','v5','v6','v7','v8','v9','v10','v13','v16','v23','v31','v32','v33','v24',
'v111','v112','v113','v121','v122','v123','v124','v131','v1in','v2out','photosynthesis')
rates=rates[-17,]
flux=rates[,ncol(rates)]
flux=c(flux,(flux[1]-flux[26])*30)
ind1=match(E(g1)$reactions,reactions)
E(g1)$flux=round(flux[ind1],2)
E(g1)$flux
plot(g1,vertex.shape=g1$shapes,edge.arrow.size=.2,vertex.label.cex=V(g1)$cex,
vertex.label.color=V(g1)$color,vertex.size=0,layout=as.matrix(layoutcoor),
edge.label=E(g1)$flux,edge.label.cex=0.8,edge.label.color="black")
PSrateEPS=read.csv("MATLAB/barley_model/PSrate_EPS.csv")
PRrateEPS=read.csv("MATLAB/barley_model/PRrate_EPS.csv")
rates=rbind(PSrateEPS,PRrateEPS)
flux=rates[,ncol(rates)]
flux=c(flux,(flux[1]-flux[9])*30)
E(g1)$flux=round(flux[ind1],2)
plot(g1,vertex.shape=g1$shapes,edge.arrow.size=.2,vertex.label.cex=V(g1)$cex,
vertex.label.color=V(g1)$color,vertex.size=0,layout=as.matrix(layoutcoor),
edge.label=E(g1)$flux,edge.label.cex=0.8,edge.label.color="black")
flux=c(flux,(flux[1]-flux[26])*30)
E(g1)$flux=round(flux[ind1],2)
plot(g1,vertex.shape=g1$shapes,edge.arrow.size=.2,vertex.label.cex=V(g1)$cex,
vertex.label.color=V(g1)$color,vertex.size=0,layout=as.matrix(layoutcoor),
edge.label=E(g1)$flux,edge.label.cex=0.8,edge.label.color="black")
(flux[1]-flux[26])*30
E(g1)$flux
ind1
flux
PSrate=read.csv("MATLAB/barley_model/PSrate.csv")
PRrate=read.csv("MATLAB/barley_model/PRrate.csv")
rates=rbind(PSrate,PRrate)
reactions=c('v1','v2','v3','null','v5','v6','v7','v8','v9','v10','v13','v16','v23','v31','v32','v33','v24',
'v111','v112','v113','v121','v122','v123','v124','v131','v1in','v2out','photosynthesis')
rates=rates[-17,]
flux=rates[,ncol(rates)]
flux=c(flux,(flux[1]-flux[26])*30)
ind1=match(E(g1)$reactions,reactions)
E(g1)$flux=round(flux[ind1],2)
PSrateEPS=read.csv("MATLAB/barley_model/PSrate_EPS.csv")
PRrateEPS=read.csv("MATLAB/barley_model/PRrate_EPS.csv")
rates=rbind(PSrateEPS,PRrateEPS)
rates=rates[-17,]
flux=rates[,ncol(rates)]
flux=c(flux,(flux[1]-flux[26])*30)
E(g1)$flux=round(flux[ind1],2)
plot(g1,vertex.shape=g1$shapes,edge.arrow.size=.2,vertex.label.cex=V(g1)$cex,
vertex.label.color=V(g1)$color,vertex.size=0,layout=as.matrix(layoutcoor),
edge.label=E(g1)$flux,edge.label.cex=0.8,edge.label.color="black")
flux
ind1
E(g1)$flux
plot(g1,vertex.shape=g1$shapes,edge.arrow.size=.2,vertex.label.cex=V(g1)$cex,
vertex.label.color=V(g1)$color,vertex.size=0,layout=as.matrix(layoutcoor),
edge.label=E(g1)$flux,edge.label.cex=0.8,edge.label.color="black")
E(g1)$reactions=rep('',ecount(g1))
E(g1)$reactions[c(4,8,12,14,17,19,23,26,28,32,34,36,40,42,44,48,50,54,56,58,60,62,66,70,74,78,83,86)]=
c('v1','v2','v3','v4','v5','v6','v7','v8','v9','v10','v11','v12','v13','v21','v22','v23','v24',
'v111','v112','v2out','v113','v1in','v121','v122','v123','v124','v131','photosynthesis')
PSrate=read.csv("MATLAB/barley_model/PSrate.csv")
PRrate=read.csv("MATLAB/barley_model/PRrate.csv")
rates=rbind(PSrate,PRrate)
reactions=c('v1','v2','v3','null','v5','v6','v7','v8','v9','v10','v13','v16','v23','v31','v32','v33','v24',
'v111','v112','v113','v121','v122','v123','v124','v131','v1in','v2out','photosynthesis')
rates=rates[-17,]
rates=rates*30;
flux=rates[,ncol(rates)]
flux=c(flux,flux[1]-flux[26])
ind1=match(E(g1)$reactions,reactions)
E(g1)$flux=round(flux[ind1],2)
plot(g1,vertex.shape=g1$shapes,edge.arrow.size=.2,vertex.label.cex=V(g1)$cex,
vertex.label.color=V(g1)$color,vertex.size=0,layout=as.matrix(layoutcoor),
edge.label=E(g1)$flux,edge.label.cex=0.8,edge.label.color="black")
PSrateEPS=read.csv("MATLAB/barley_model/PSrate_EPS.csv")
PRrateEPS=read.csv("MATLAB/barley_model/PRrate_EPS.csv")
rates=rbind(PSrateEPS,PRrateEPS)
rates=rates*30;
rates=rates[-17,]
flux=rates[,ncol(rates)]
flux=c(flux,flux[1]-flux[26])
E(g1)$flux=round(flux[ind1],2)
plot(g1,vertex.shape=g1$shapes,edge.arrow.size=.2,vertex.label.cex=V(g1)$cex,
vertex.label.color=V(g1)$color,vertex.size=0,layout=as.matrix(layoutcoor),
edge.label=E(g1)$flux,edge.label.cex=0.8,edge.label.color="black")
source("~/CAPITALIZE_ML/script/Rfunctions.R")
check=read.delim("C:/Users/Rudan/Documents/orphan.txt")
View(check)
check=read.delim("C:/Users/Rudan/Documents/orphan.txt",header = F)
View(check)
colnames(check)='Orphan genes'
View(check)
write.csv(check,file="C:/Users/Rudan/Desktop/orphan genes/all_orphan_genes.csv")
write.csv(check,file="C:/Users/Rudan/Desktop/orphan genes/all_orphan_genes.csv",row.names = F)
# setwd("/work/xu2/HyperspectralML/")
setwd("C:/Users/Rudan/Documents/HyperspectralML_complete/TESTgroup-BNL-spectratrait-3182844/R/")
list.of.packages <- c("pls","dplyr","plotrix","ggplot2","gridExtra")
invisible(lapply(list.of.packages, library, character.only = TRUE))
### Setup other functions and options
# not in
`%notin%` <- Negate(`%in%`)
# Script options
pls::pls.options(plsralg = "oscorespls")
pls::pls.options("plsralg")
# Default par options
opar <- par(no.readonly = T)
# What is the target variable?
inVar <- "LMA_g_m2"
# What is the source dataset from EcoSIS?
ecosis_id <- "9db4c5a2-7eac-4e1e-8859-009233648e89"
# Specify output directory, output_dir
# Options:
# tempdir - use a OS-specified temporary directory
# user defined PATH - e.g. "~/scratch/PLSR"
output_dir <- "tempdir"
myls2 <- list.files(pattern="*.R")
sapply(myls2,FUN=source)
### Get source dataset from EcoSIS
dat_raw <- get_ecosis_data(ecosis_id = ecosis_id)
View(dat_raw)
######################################################################
### Create plsr dataset
Start.wave <- 500
End.wave <- 2400
wv <- seq(Start.wave,End.wave,1)
Spectra <- as.matrix(dat_raw[,names(dat_raw) %in% wv])
colnames(Spectra) <- c(paste0("Wave_",wv))
sample_info <- dat_raw[,names(dat_raw) %notin% seq(350,2500,1)]
head(sample_info)
sample_info2 <- sample_info %>%
select(Plant_Species=`Latin Species`,Species_Code=`species code`,Plot=`plot code`,
LMA_g_cm2=`Leaf mass per area (g/cm2)`)
sample_info2 <- sample_info2 %>%
mutate(LMA_g_m2=LMA_g_cm2*10000)
head(sample_info2)
plsr_data <- data.frame(sample_info2,Spectra)
View(plsr_data)
View(plsr_data)
rm(sample_info,sample_info2,Spectra)
plsr_data <- plsr_data[complete.cases(plsr_data[,names(plsr_data) %in%
c(inVar,paste0("Wave_",wv))]),]
View(plsr_data)
# base R - a bit slow
# dplyr - much faster
split_data <- create_data_split(dataset=plsr_data, approach=method,
split_seed=7529075, prop=0.8,
group_variables="Species_Code")
method <- "dplyr" #base/dplyr
# base R - a bit slow
# dplyr - much faster
split_data <- create_data_split(dataset=plsr_data, approach=method,
split_seed=7529075, prop=0.8,
group_variables="Species_Code")
View(split_data)
names(split_data)
cal.plsr.data <- split_data$cal_data
head(cal.plsr.data)[1:8]
intersect(split_data$cal_data$Plant_Species,split_data$val_data$Plant_Species)
cal.plsr.data <- split_data$cal_data
head(cal.plsr.data)[1:8]
val.plsr.data <- split_data$val_data
head(val.plsr.data)[1:8]
rm(split_data)
View(cal.plsr.data)
cal_spec <- as.matrix(cal.plsr.data[, which(names(cal.plsr.data) %in%
paste0("Wave_",wv))])
cal.plsr.data <- data.frame(cal.plsr.data[, which(names(cal.plsr.data) %notin%
paste0("Wave_",wv))],
Spectra=I(cal_spec))
View(cal.plsr.data)
Start.wave <- 500
End.wave <- 2400
wv <- seq(Start.wave,End.wave,1)
Spectra <- as.matrix(dat_raw[,names(dat_raw) %in% wv])
colnames(Spectra) <- c(paste0("Wave_",wv))
sample_info <- dat_raw[,names(dat_raw) %notin% seq(350,2500,1)]
head(sample_info)
sample_info2 <- sample_info %>%
select(Plant_Species=`Latin Species`,Species_Code=`species code`,Plot=`plot code`,
LMA_g_cm2=`Leaf mass per area (g/cm2)`)
sample_info2 <- sample_info2 %>%
mutate(LMA_g_m2=LMA_g_cm2*10000)
head(sample_info2)
plsr_data <- data.frame(sample_info2,Spectra)
rm(sample_info,sample_info2,Spectra)
plsr_data <- plsr_data[complete.cases(plsr_data[,names(plsr_data) %in%
c(inVar,paste0("Wave_",wv))]),]
# base R - a bit slow
# dplyr - much faster
split_data <- create_data_split(dataset=plsr_data, approach=method,
split_seed=7529075, prop=0.8,
group_variables="Species_Code")
names(split_data)
cal.plsr.data <- split_data$cal_data
head(cal.plsr.data)[1:8]
intersect(split_data$cal_data$Plant_Species,split_data$val_data$Plant_Species)
cal.plsr.data <- split_data$cal_data
head(cal.plsr.data)[1:8]
val.plsr.data <- split_data$val_data
head(val.plsr.data)[1:8]
## Step 8. Create calibration and validation PLSR datasets
### Format PLSR data for model fitting
cal_spec <- as.matrix(cal.plsr.data[, which(names(cal.plsr.data) %in%
paste0("Wave_",wv))])
cal.plsr.data <- data.frame(cal.plsr.data[, which(names(cal.plsr.data) %notin%
paste0("Wave_",wv))],
Spectra=I(cal_spec))
View(cal.plsr.data)
val_spec <- as.matrix(val.plsr.data[, which(names(val.plsr.data) %in%
paste0("Wave_",wv))])
val.plsr.data <- data.frame(val.plsr.data[, which(names(val.plsr.data) %notin%
paste0("Wave_",wv))],
Spectra=I(val_spec))
head(val.plsr.data)[1:5]
### Use permutation to determine the optimal number of components
if(grepl("Windows", sessionInfo()$running)){
pls.options(parallel = NULL)
} else {
pls.options(parallel = parallel::detectCores()-1)
}
method <- "firstMin" #pls, firstPlateau, firstMin
random_seed <- 7529075
seg <- 80
maxComps <- 16
iterations <- 50
prop <- 0.70
if (method=="pls") {
nComps <- find_optimal_components(dataset=cal.plsr.data, targetVariable=inVar,
method=method,
maxComps=maxComps, seg=seg,
random_seed=random_seed)
print(paste0("*** Optimal number of components: ", nComps))
} else {
nComps <- find_optimal_components(dataset=cal.plsr.data,
method=method,
maxComps=maxComps, iterations=iterations,
seg=seg, prop=prop,
random_seed=random_seed)
}
### Fit final model - using leave-one-out cross validation
plsr.out <- plsr(as.formula(paste(inVar,"~","Spectra")),scale=FALSE,ncomp=nComps,
validation="LOO",trace=FALSE,data=cal.plsr.data)
fit <- plsr.out$fitted.values[,1,nComps]
pls.options(parallel = NULL)
# External validation fit stats
text_loc <- c(max(RMSEP(plsr.out, newdata = val.plsr.data)$comps),
RMSEP(plsr.out, newdata = val.plsr.data)$val[1])
par(mfrow=c(1,2)) # B, L, T, R
pls::RMSEP(plsr.out, newdata = val.plsr.data)
plot(pls::RMSEP(plsr.out,estimate=c("test"),newdata = val.plsr.data), main="MODEL RMSEP",
xlab="Number of Components",ylab="Model Validation RMSEP",lty=1,col="black",cex=1.5,lwd=2)
text(text_loc[1],text_loc[2],labels = "4.", cex=2)
box(lwd=2.2)
pls::R2(plsr.out, newdata = val.plsr.data)
plot(pls::R2(plsr.out,estimate=c("test"),newdata = val.plsr.data), main="MODEL R2",
xlab="Number of Components",ylab="Model Validation R2",lty=1,col="black",cex=1.5,lwd=2)
box(lwd=2.2)
View(plsr.out)
fit <- plsr.out$fitted.values[,1,nComps]
check=plsr.out$validation$pred[,,nComps]
plot(check,fit)
## Step 12. PLSR fit observed vs. predicted plot data
#calibration
cal.plsr.output <- data.frame(cal.plsr.data[, which(names(cal.plsr.data) %notin%
"Spectra")],
PLSR_Predicted=fit,
PLSR_CV_Predicted=as.vector(plsr.out$validation$pred[,,
nComps]))
cal.plsr.output <- cal.plsr.output %>%
mutate(PLSR_CV_Residuals = PLSR_CV_Predicted-get(inVar))
head(cal.plsr.output)
cal.R2 <- round(pls::R2(plsr.out,intercept=F)[[1]][nComps],2)
cal.RMSEP <- round(sqrt(mean(cal.plsr.output$PLSR_CV_Residuals^2)),2)
val.plsr.output <- data.frame(val.plsr.data[, which(names(val.plsr.data) %notin%
"Spectra")],
PLSR_Predicted=as.vector(predict(plsr.out,
newdata = val.plsr.data,
ncomp=nComps,
type="response")[,,1]))
val.plsr.output <- val.plsr.output %>%
mutate(PLSR_Residuals = PLSR_Predicted-get(inVar))
head(val.plsr.output)
val.R2 <- round(pls::R2(plsr.out,newdata=val.plsr.data,intercept=F)[[1]][nComps],2)
val.RMSEP <- round(sqrt(mean(val.plsr.output$PLSR_Residuals^2)),2)
rng_quant <- quantile(cal.plsr.output[,inVar], probs = c(0.001, 0.999))
cal_scatter_plot <- ggplot(cal.plsr.output, aes(x=PLSR_CV_Predicted, y=LMA_g_m2)) +
theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1, color="dark grey",
linetype="dashed", size=1.5) +
xlim(rng_quant[1], rng_quant[2]) +
ylim(rng_quant[1], rng_quant[2]) +
labs(x=paste0("Predicted ", paste(inVar), " (units)"),
y=paste0("Observed ", paste(inVar), " (units)"),
title=paste0("Calibration: ", paste0("Rsq = ", cal.R2), "; ",
paste0("RMSEP = ", cal.RMSEP))) +
theme(axis.text=element_text(size=18), legend.position="none",
axis.title=element_text(size=20, face="bold"),
axis.text.x = element_text(angle = 0,vjust = 0.5),
panel.border = element_rect(linetype = "solid", fill = NA, size=1.5)) +
annotate("text", x=rng_quant[1], y=rng_quant[2], label= "5.",size=10)
cal_resid_histogram <- ggplot(cal.plsr.output, aes(x=PLSR_CV_Residuals)) +
geom_histogram(alpha=.5, position="identity") +
geom_vline(xintercept = 0, color="black",
linetype="dashed", size=1) + theme_bw() +
theme(axis.text=element_text(size=18), legend.position="none",
axis.title=element_text(size=20, face="bold"),
axis.text.x = element_text(angle = 0,vjust = 0.5),
panel.border = element_rect(linetype = "solid", fill = NA, size=1.5))
rng_quant <- quantile(val.plsr.output[,inVar], probs = c(0.001, 0.999))
val_scatter_plot <- ggplot(val.plsr.output, aes(x=PLSR_Predicted, y=get(inVar))) +
theme_bw() + geom_point() + geom_abline(intercept = 0, slope = 1, color="dark grey",
linetype="dashed", size=1.5) +
xlim(rng_quant[1], rng_quant[2]) +
ylim(rng_quant[1], rng_quant[2]) +
labs(x=paste0("Predicted ", paste(inVar), " (units)"),
y=paste0("Observed ", paste(inVar), " (units)"),
title=paste0("Validation: ", paste0("Rsq = ", val.R2), "; ",
paste0("RMSEP = ", val.RMSEP))) +
theme(axis.text=element_text(size=18), legend.position="none",
axis.title=element_text(size=20, face="bold"),
axis.text.x = element_text(angle = 0,vjust = 0.5),
panel.border = element_rect(linetype = "solid", fill = NA, size=1.5))
val_resid_histogram <- ggplot(val.plsr.output, aes(x=PLSR_Residuals)) +
geom_histogram(alpha=.5, position="identity") +
geom_vline(xintercept = 0, color="black",
linetype="dashed", size=1) + theme_bw() +
theme(axis.text=element_text(size=18), legend.position="none",
axis.title=element_text(size=20, face="bold"),
axis.text.x = element_text(angle = 0,vjust = 0.5),
panel.border = element_rect(linetype = "solid", fill = NA, size=1.5))
# plot cal/val side-by-side
scatterplots <- grid.arrange(cal_scatter_plot, val_scatter_plot, cal_resid_histogram,
val_resid_histogram, nrow=2, ncol=2)
View(plsr_data)
unique(plsr_data$Plant_Species)
unique(plsr_data$Plot)
35*45
