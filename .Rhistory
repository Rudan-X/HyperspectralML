dataset<-c("Calibration","Validation")
datatype <- c("raw_data","plot_averaged","genotype_averaged")
datalabel <- c("Raw data","Averaged per replicate","Averaged per genotype") #
d=3
inVar="N"
load(paste0("results/comparePLSR_SVR/PLSR_repeatedCV_model_",datatype[d],"_",agg,year,"_o", segments0*nrep,"i",segment*repl,"_",inVar,".RData"))
# load(paste0("results/comparePLSR_SVR/tuned_SVR_model_",datatype[d],"_",agg,year,"_o", segments0*nrep,"_",inVar,".RData"))
# res.rcv.svr.tuned <- res.rcv.svr
load(paste0("results/comparePLSR_SVR/SVR_model_",datatype[d],"_",agg,year,"_o", segments0*nrep,"_",inVar,".RData"))
t=2
dfr2<-data.frame(score=apply(res.rcv.mse$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",datatype=datalabel[d])
dfrmse<-data.frame(score=apply(res.rcv.mse$RMSEP[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",datatype=datalabel[d])
dfrmseper<-data.frame(score=apply(res.rcv.mse$RMSEPper[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",datatype=datalabel[d])
dfnoc<-data.frame(NoC=apply(res.rcv.mse$bestnoc, 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",datatype=datalabel[d])
View(dfr2)
max(dfr2$score)
mean(dfr2$score)
inVar="SLA"
load(paste0("results/comparePLSR_SVR/PLSR_repeatedCV_model_",datatype[d],"_",agg,year,"_o", segments0*nrep,"i",segment*repl,"_",inVar,".RData"))
dfr2<-data.frame(score=apply(res.rcv.mse$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",datatype=datalabel[d])
dfrmse<-data.frame(score=apply(res.rcv.mse$RMSEP[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",datatype=datalabel[d])
dfrmseper<-data.frame(score=apply(res.rcv.mse$RMSEPper[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",datatype=datalabel[d])
dfnoc<-data.frame(NoC=apply(res.rcv.mse$bestnoc, 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",datatype=datalabel[d])
max(dfr2$score)
mean(dfr2$score)
y=3
y=2
segments0 <- 5
nrep <- 20
segment <- 3
repl <- 10
agg <- "sampledHSR" #
dataset<-c("Calibration","Validation")
datatype <- c("raw_data","plot_averaged","genotype_averaged") #
datalabel <- c("Raw data","Averaged by\n replicate","Averaged by\n genotype") #
ini<-TRUE
year1 <- c(2021,2021,2022)
year2 <- c(2022,2023,2023)
yearlabel <- c("2021&2022","2021&2023","2022&2023")
d=2
filen=paste0("results/compare_season/PLSR_repeatedCV_model_",datatype[d],"_",agg,year1[y],"and",year2[y],"_o", segments0*nrep,"i",segment*repl,"_",inVar,".RData")
load(filen)
dfr2<-data.frame(score=apply(res.rcv.mse$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",datatype=datalabel[d], Season=yearlabel[y])
dfrmse<-data.frame(score=apply(res.rcv.mse$RMSEP[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",datatype=datalabel[d], Season=yearlabel[y])
dfrmseper<-data.frame(score=apply(res.rcv.mse$RMSEPper[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",datatype=datalabel[d], Season=yearlabel[y])
dfnoc<-data.frame(NoC=apply(res.rcv.mse$bestnoc, 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",datatype=datalabel[d], Season=yearlabel[y])
max(dfr2$score)
mean(dfr2$score)
y=1
filen=paste0("results/compare_season/PLSR_repeatedCV_model_",datatype[d],"_",agg,year1[y],"and",year2[y],"_o", segments0*nrep,"i",segment*repl,"_",inVar,".RData")
load(filen)
dfr2<-data.frame(score=apply(res.rcv.mse$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",datatype=datalabel[d], Season=yearlabel[y])
max(dfr2$score)
mean(dfr2$score)
inVar="Vmax"
filen=paste0("results/compare_season/PLSR_repeatedCV_model_",datatype[d],"_",agg,year1[y],"and",year2[y],"_o", segments0*nrep,"i",segment*repl,"_",inVar,".RData")
load(filen)
t
dfr2<-data.frame(score=apply(res.rcv.mse$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",datatype=datalabel[d], Season=yearlabel[y])
max(dfr2$score)
mean(dfr2$score)
inVar="a400"
filen=paste0("results/compare_season/PLSR_repeatedCV_model_",datatype[d],"_",agg,year1[y],"and",year2[y],"_o", segments0*nrep,"i",segment*repl,"_",inVar,".RData")
load(filen)
dfr2<-data.frame(score=apply(res.rcv.mse$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",datatype=datalabel[d], Season=yearlabel[y])
max(dfr2$score)
mean(dfr2$score)
d=1
filen=paste0("results/compare_season/PLSR_repeatedCV_model_",datatype[d],"_",agg,year1[y],"and",year2[y],"_o", segments0*nrep,"i",segment*repl,"_",inVar,".RData")
file.exists(filen)
list.of.packages <- c("pls","dplyr","plotrix","ggplot2","gridExtra","chemometrics","reshape2")
invisible(lapply(list.of.packages, library, character.only = TRUE))
path0 <- "/home/mpimp-golm.mpg.de/xu2004/HyperspectralML/"
if (!dir.exists(path0)) {
path0 <- "C:/Users/Rudan/Documents/GitHub/HyperspectralML/"
}
setwd(path0)
for (file in c("R_Burnett/","myR/")){
filen<-paste0(path0,"R/",file)
myls <- list.files(path=filen,pattern="*.R")
myls<-paste0(filen,myls)
invisible(sapply(myls,FUN=source))
}
vars<-c("Vmax","a400","phiPSII_ind_res","maxNPQ") #"SLA","N",
year <- 2023
plsmethod<-"oscorespls"
maxnoc<-25
segments0 <- 5
nrep <- 20
repl<-10
segment<-3
agg <-"sampledHSR"
year1 <- c(2021,2021,2022)
year2 <- c(2022,2023,2023)
datatype="raw_data"
y=1
inVar="Vmax"
vars=c("Vmax","a400")
for (inVar in vars){
traitHSR1 <- read.csv(paste0("data/combined_data/traits_and_HSR",year1[y],"_",datatype,".csv"))
traitHSR2 <- read.csv(paste0("data/combined_data/traits_and_HSR",year2[y],"_",datatype,".csv"))
sametrait <- intersect(colnames(traitHSR1),colnames(traitHSR2))
traitHSR <- rbind(traitHSR1[,sametrait],traitHSR2[,sametrait])
if (inVar=="N" | inVar=="CN"){
Start.wave <- 1500
End.wave <- 2400
}else{
Start.wave <- 400
End.wave <- 2400
}
if (agg=="fullHSR"){
wv <- seq(Start.wave,End.wave,1)
}else{
wv <- seq(Start.wave,End.wave,by=5)
}
spec <- as.matrix(traitHSR[, which(names(traitHSR) %in%  paste0("mean_",wv))])
traitHSR <- cbind(data.frame(y=traitHSR[,inVar]),spec)
colnames(traitHSR)[1] <- "y"
traitHSR <- traitHSR[!is.na(traitHSR$y),]
templ <- list(train = matrix(0,segments0,nrep), test = matrix(0,segments0,nrep))
temp <- matrix(0,segments0,nrep)
temp2 <- matrix(0,nrow(traitHSR),segments0*nrep)
res.rcv.mse <- list(R2 = templ, RMSEP = templ, RMSEPper = templ, bestnoc = temp, pred = temp2)
folds <- list()
for (r in 1:nrep){
print(paste0("Current repetition: ",r))
folds[[r]] <- random_split(seq(1,nrow(traitHSR)), k = segments0)
for (f in 1:length(folds[[r]])){
val.ind <- folds[[r]][[f]]
cal.ind <- setdiff(seq(1,nrow(traitHSR)),val.ind)
val.data <- traitHSR[val.ind, ]
cal.data <- traitHSR[cal.ind, ]
cal_spec <- as.matrix(cal.data[, which(names(cal.data) %in%  paste0("mean_",wv))])
cal.data <- data.frame(y=cal.data$y, Spectra=I(cal_spec))
val_spec <- as.matrix(val.data[, which(names(val.data) %in% paste0("mean_",wv))])
val.data <- data.frame(y=val.data$y, Spectra=I(val_spec))
datasets<-list(cal.data,val.data)
#####################
iloop.rcv <- innerloop_repeatedCV(dataset=cal.data,formula=as.formula("y~Spectra"),maxComps =maxnoc,method=plsmethod,iterations=repl,segments=segment,parallel=FALSE)
nComps.mse<-selectNOC_MSE(MSEP = iloop.rcv$MSEP, select_strat ="hastie",sdfact=0.5,repl = repl, segments = segment)
res.rcv.mse$bestnoc[f,r] <- nComps.mse$bestnoc
noc.rcv.mse <- nComps.mse$bestnoc
model.mse <- plsr(as.formula("y~Spectra"),data=cal.data, ncomp = noc.rcv.mse,  method = plsmethod, scale = FALSE,validation = "none")
for (t in 1:2){
pred.mse<-predict(model.mse, newdata=datasets[[t]], ncomp = noc.rcv.mse)
if (t==1){
res.rcv.mse$pred[cal.ind,(r-1)*segments0+f] <- pred.mse
}else{
res.rcv.mse$pred[val.ind,(r-1)*segments0+f] <- pred.mse
}
sq_resid <- (pred.mse - datasets[[t]]$y)^2
res.rcv.mse$R2[[t]][f,r] <- round(pls::R2(model.mse,newdata=datasets[[t]],intercept=F)[[1]][noc.rcv.mse],2)
rmsep <- round(sqrt(mean(sq_resid)),2)
res.rcv.mse$RMSEP[[t]][f,r] <- rmsep
val_data_range <- range(datasets[[t]]$y, na.rm = TRUE)
res.rcv.mse$RMSEPper[[t]][f,r] <- (rmsep/(val_data_range[2]-val_data_range[1]))*100
}
}
}
res.rcv.mse$folds <- folds
save(res.rcv.mse, file=paste0("results/compare_season/PLSR_repeatedCV_model_",datatype,"_allyears_o", segments0*nrep,"i",segment*repl,"_",inVar,".RData"))
# save(res.rcv.mse, file=paste0("results/compare_season/PLSR_repeatedCV_model_",datatype,"_",agg,year1[y],"and",year2[y],"_o", segments0*nrep,"i",segment*repl,"_",inVar,".RData"))
}
d
d=1
datatype <- c("raw_data","plot_averaged","genotype_averaged") #
datalabel <- c("Raw data","Averaged by\n replicate","Averaged by\n genotype") #
inVar
y
filen=paste0("results/compare_season/PLSR_repeatedCV_model_",datatype[d],"_",agg,year1[y],"and",year2[y],"_o", segments0*nrep,"i",segment*repl,"_",inVar,".RData")
load(filen)
paste0("results/compare_season/PLSR_repeatedCV_model_",datatype,"_allyears_o", segments0*nrep,"i",segment*repl,"_",inVar,".RData")
filen=paste0("results/compare_season/PLSR_repeatedCV_model_",datatype[d],"_",agg,year1[y],"and",year2[y],"_o", segments0*nrep,"i",segment*repl,"_",inVar,".RData")
load(filen)
load(filen)
dfr2<-data.frame(score=apply(res.rcv.mse$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",datatype=datalabel[d], Season=yearlabel[y])
t
dataset<-c("Calibration","Validation")
t
dfr2<-data.frame(score=apply(res.rcv.mse$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",datatype=datalabel[d], Season=yearlabel[y])
yearlabel <- c("2021&2022","2021&2023","2022&2023")
dfr2<-data.frame(score=apply(res.rcv.mse$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",datatype=datalabel[d], Season=yearlabel[y])
max(dfr2$score)
mean(dfr2$score)
inVar
inVar="Vmax"
filen=paste0("results/compare_season/PLSR_repeatedCV_model_",datatype[d],"_",agg,year1[y],"and",year2[y],"_o", segments0*nrep,"i",segment*repl,"_",inVar,".RData")
load(filen)
dfr2<-data.frame(score=apply(res.rcv.mse$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",datatype=datalabel[d], Season=yearlabel[y])
mean(dfr2$score)
max(dfr2$score)
d
d=2
filen=paste0("results/compare_season/PLSR_repeatedCV_model_",datatype[d],"_",agg,year1[y],"and",year2[y],"_o", segments0*nrep,"i",segment*repl,"_",inVar,".RData")
load(filen)
dfr2<-data.frame(score=apply(res.rcv.mse$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",datatype=datalabel[d], Season=yearlabel[y])
mean(dfr2$score)
mean(dfr2$score)y
y
list.of.packages <- c("pls","dplyr","plotrix","ggplot2","gridExtra","chemometrics","reshape2","ggpubr")
invisible(lapply(list.of.packages, library, character.only = TRUE))
setwd("C:/Users/Rudan/Documents/GitHub/HyperspectralML/")
for (file in c("R_Burnett/","myR/")){
filen<-paste0("C:/Users/Rudan/Documents/GitHub/HyperspectralML/R/",file)
myls <- list.files(path=filen,pattern="*.R")
myls<-paste0(filen,myls)
invisible(sapply(myls,FUN=source))
}
vars<-c( "SLA","N","Vmax","a400","phiPSII_ind_res","maxNPQ") #
# "SLA","N","CN","Vpmax","Vmax","gsw","a400","phiPSII_ind_res","maxNPQ","endFvFm","initialFvFm"
segments0 <- 5
nrep <- 20
segment <- 3
repl <- 10
agg <- "sampledHSR" #
dataset<-c("Calibration","Validation")
datatype <- c("raw_data","plot_averaged","genotype_averaged") #
datalabel <- c("Raw data","Averaged by\n replicate","Averaged by\n genotype") #
year1 <- c(2021,2021,2022)
year2 <- c(2022,2023,2023)
yearlabel <- c("2021&2022","2021&2023","2022&2023")
y=1
d=3
d=2
inVar="Vmax"
filen=paste0("results/compare_season/PLSR_repeatedCV_model_",datatype[d],"_",agg,year1[y],"and",year2[y],"_o", segments0*nrep,"i",segment*repl,"_",inVar,".RData")
load(filen)
t=2
dfr2<-data.frame(score=apply(res.rcv.mse$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",datatype=datalabel[d], Season=yearlabel[y])
mean(dfr2$score)
max(dfr2$score)
year=2022
d=1
inVar="Vpmax"
dataset<-c("Calibration","Validation")
datatype <- c("raw_data","plot_averaged","genotype_averaged") #
datalabel <- c("Raw data","Averaged by\n replicate","Averaged by\n genotype") #
ini<-TRUE
filen <- paste0("results/compare_season/PLSR_repeatedCV_model_",datatype[d],"_",agg,year,"_o", segments0*nrep,"i",segment*repl,"_",inVar,".RData")
load(filen)
t=1
dfr2<-data.frame(score=apply(res.rcv.mse$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",datatype=datalabel[d], Season=year)
mean(dfr2$score)
rm(list = ls())
list.of.packages <- c("pls","dplyr","plotrix","ggplot2","gridExtra","chemometrics","reshape2","ggpubr")
invisible(lapply(list.of.packages, library, character.only = TRUE))
setwd("C:/Users/Rudan/Documents/GitHub/HyperspectralML/")
for (file in c("R_Burnett/","myR/")){
filen<-paste0("C:/Users/Rudan/Documents/GitHub/HyperspectralML/R/",file)
myls <- list.files(path=filen,pattern="*.R")
myls<-paste0(filen,myls)
invisible(sapply(myls,FUN=source))
}
vars<-c( "SLA","N","Vmax","a400","phiPSII_ind_res","maxNPQ") #
# "SLA","N","CN","Vpmax","Vmax","gsw","a400","phiPSII_ind_res","maxNPQ","endFvFm","initialFvFm"
year <- 2021
segments0 <- 5
nrep <- 20
segment <- 3
repl <- 10
agg <- "sampledHSR" #
dataset<-c("Calibration","Validation")
datatype <- c("raw_data")
datalabel <- c("Raw data") #
ini<-TRUE
for (d in 1:length(datatype)){#
for (inVar in vars){
load(paste0("results/comparePLSR_SVR/PLSR_notuned_model_",datatype[d],"_",agg,year,"_o", segments0*nrep,"__NOC25_",inVar,".RData"))
res.plsr.notuned <- res.rcv.mse
load(paste0("results/comparePLSR_SVR/PLSR_repeatedCV_model_",datatype[d],"_",agg,year,"_o", segments0*nrep,"i",segment*repl,"_",inVar,".RData"))
load(paste0("results/comparePLSR_SVR/tuned_SVR_model_",datatype[d],"_",agg,year,"_o", segments0*nrep,"_",inVar,".RData"))
res.rcv.svr.tuned <- res.rcv.svr
load(paste0("results/comparePLSR_SVR/tuned_SVR_model_",datatype[d],"_",agg,year,"_o", segments0*nrep,"_",inVar,".RData"))
for (t in 1:2){
if (ini){
dfr2<-data.frame(score=apply(res.rcv.mse$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d])
dfrmse<-data.frame(score=apply(res.rcv.mse$RMSEP[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d])
dfrmseper<-data.frame(score=apply(res.rcv.mse$RMSEPper[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d])
dfnoc<-data.frame(NoC=apply(res.rcv.mse$bestnoc, 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d])
ini<-FALSE
}else{
dfr2<-rbind(dfr2,data.frame(score=apply(res.rcv.mse$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d]))
dfrmse<-rbind(dfrmse,data.frame(score=apply(res.rcv.mse$RMSEP[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d]))
dfrmseper<-rbind(dfrmseper,data.frame(score=apply(res.rcv.mse$RMSEPper[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d]))
dfnoc<-rbind(dfnoc,data.frame(NoC=apply(res.rcv.mse$bestnoc, 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d]))
}
dfr2<-rbind(dfr2,data.frame(score=apply(res.plsr.notuned$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="FALSE",datatype=datalabel[d]))
dfrmse<-rbind(dfrmse,data.frame(score=apply(res.plsr.notuned$RMSEP[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="FALSE",datatype=datalabel[d]))
dfrmseper<-rbind(dfrmseper,data.frame(score=apply(res.plsr.notuned$RMSEPper[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="FALSE",datatype=datalabel[d]))
dfnoc<-rbind(dfnoc,data.frame(NoC=apply(res.plsr.notuned$bestnoc, 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="FALSE",datatype=datalabel[d]))
dfr2<-rbind(dfr2,data.frame(score=apply(res.rcv.svr.tuned$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="TRUE",datatype=datalabel[d]))
dfrmse<-rbind(dfrmse,data.frame(score=apply(res.rcv.svr.tuned$RMSEP[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="TRUE",datatype=datalabel[d]))
dfrmseper<-rbind(dfrmseper,data.frame(score=apply(res.rcv.svr.tuned$RMSEPper[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="TRUE",datatype=datalabel[d]))
dfnoc<-rbind(dfnoc,data.frame(NoC=apply(res.rcv.svr.tuned$bestnoc, 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="TRUE",datatype=datalabel[d]))
dfr2<-rbind(dfr2,data.frame(score=apply(res.rcv.svr$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="FALSE",datatype=datalabel[d]))
dfrmse<-rbind(dfrmse,data.frame(score=apply(res.rcv.svr$RMSEP[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="FALSE",datatype=datalabel[d]))
dfrmseper<-rbind(dfrmseper,data.frame(score=apply(res.rcv.svr$RMSEPper[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="FALSE",datatype=datalabel[d]))
dfnoc<-rbind(dfnoc,data.frame(NoC=apply(res.rcv.svr$bestnoc, 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="FALSE",datatype=datalabel[d]))
}
}
}
ini<-TRUE
for (d in 1:length(datatype)){#
for (inVar in vars){
load(paste0("results/comparePLSR_SVR/PLSR_notuned_model_",datatype[d],"_",agg,year,"_o", segments0*nrep,"_NOC25_",inVar,".RData"))
res.plsr.notuned <- res.rcv.mse
load(paste0("results/comparePLSR_SVR/PLSR_repeatedCV_model_",datatype[d],"_",agg,year,"_o", segments0*nrep,"i",segment*repl,"_",inVar,".RData"))
load(paste0("results/comparePLSR_SVR/tuned_SVR_model_",datatype[d],"_",agg,year,"_o", segments0*nrep,"_",inVar,".RData"))
res.rcv.svr.tuned <- res.rcv.svr
load(paste0("results/comparePLSR_SVR/tuned_SVR_model_",datatype[d],"_",agg,year,"_o", segments0*nrep,"_",inVar,".RData"))
for (t in 1:2){
if (ini){
dfr2<-data.frame(score=apply(res.rcv.mse$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d])
dfrmse<-data.frame(score=apply(res.rcv.mse$RMSEP[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d])
dfrmseper<-data.frame(score=apply(res.rcv.mse$RMSEPper[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d])
dfnoc<-data.frame(NoC=apply(res.rcv.mse$bestnoc, 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d])
ini<-FALSE
}else{
dfr2<-rbind(dfr2,data.frame(score=apply(res.rcv.mse$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d]))
dfrmse<-rbind(dfrmse,data.frame(score=apply(res.rcv.mse$RMSEP[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d]))
dfrmseper<-rbind(dfrmseper,data.frame(score=apply(res.rcv.mse$RMSEPper[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d]))
dfnoc<-rbind(dfnoc,data.frame(NoC=apply(res.rcv.mse$bestnoc, 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d]))
}
dfr2<-rbind(dfr2,data.frame(score=apply(res.plsr.notuned$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="FALSE",datatype=datalabel[d]))
dfrmse<-rbind(dfrmse,data.frame(score=apply(res.plsr.notuned$RMSEP[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="FALSE",datatype=datalabel[d]))
dfrmseper<-rbind(dfrmseper,data.frame(score=apply(res.plsr.notuned$RMSEPper[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="FALSE",datatype=datalabel[d]))
dfnoc<-rbind(dfnoc,data.frame(NoC=apply(res.plsr.notuned$bestnoc, 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="FALSE",datatype=datalabel[d]))
dfr2<-rbind(dfr2,data.frame(score=apply(res.rcv.svr.tuned$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="TRUE",datatype=datalabel[d]))
dfrmse<-rbind(dfrmse,data.frame(score=apply(res.rcv.svr.tuned$RMSEP[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="TRUE",datatype=datalabel[d]))
dfrmseper<-rbind(dfrmseper,data.frame(score=apply(res.rcv.svr.tuned$RMSEPper[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="TRUE",datatype=datalabel[d]))
dfnoc<-rbind(dfnoc,data.frame(NoC=apply(res.rcv.svr.tuned$bestnoc, 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="TRUE",datatype=datalabel[d]))
dfr2<-rbind(dfr2,data.frame(score=apply(res.rcv.svr$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="FALSE",datatype=datalabel[d]))
dfrmse<-rbind(dfrmse,data.frame(score=apply(res.rcv.svr$RMSEP[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="FALSE",datatype=datalabel[d]))
dfrmseper<-rbind(dfrmseper,data.frame(score=apply(res.rcv.svr$RMSEPper[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="FALSE",datatype=datalabel[d]))
dfnoc<-rbind(dfnoc,data.frame(NoC=apply(res.rcv.svr$bestnoc, 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="FALSE",datatype=datalabel[d]))
}
}
}
stat_box_data <- function(y) {
return(
data.frame(
y = max(y),  #may need to modify this depending on your data
label = paste(round(median(y),2), '\n')
)
)
}
dfr2$Trait_type <- varclass[match(dfr2$trait,var1)]
dfr2$Trait_type <- factor(dfr2$Trait_type,levels=c("Structural & biochemical","Gas exchange","Chlorophyll fluorescence"))
dfr2$trait <- var2[match(dfr2$trait,var1)] # var1 and var2loaded by  myR/change_var_names.R
dfr2$trait <- factor(dfr2$trait, levels=var2[match(vars,var1)])
dfr2$Model <- factor(dfr2$Model,levels=unique(dfr2$Model))
dfr2$datatype <- factor(dfr2$datatype,levels=datalabel)
ggplot(dfr2[dfr2$data_split=="Validation",], aes(x=trait, y=score,fill=Tuning)) +
geom_boxplot()+
facet_grid(Model ~ Trait_type,scales="free")+
labs(y="Coefficient of determination",x="") +
stat_summary(fun.data = stat_box_data,geom = "text", aes(group=Tuning), size=3,position=position_dodge(0.9)) +
theme(legend.position = "bottom",legend.text = element_text(size=15,face="plain"),legend.title=element_text(size=16,face="bold"),
text = element_text(size = 14,face="bold"),axis.text =  element_text(size = 14,face="bold"),
axis.title=element_text(size=16,face="bold"), strip.text = element_text(size=15,face="bold"))+
scale_fill_brewer(name="Hyperparameter tuning",palette = "Dark2") +
stat_compare_means(label = "p.signif",label.y = -2.4) +
coord_cartesian(ylim =c(-2.5, 0.85))
rm(list = ls())
list.of.packages <- c("pls","dplyr","plotrix","ggplot2","gridExtra","chemometrics","reshape2","ggpubr")
invisible(lapply(list.of.packages, library, character.only = TRUE))
setwd("C:/Users/Rudan/Documents/GitHub/HyperspectralML/")
for (file in c("R_Burnett/","myR/")){
filen<-paste0("C:/Users/Rudan/Documents/GitHub/HyperspectralML/R/",file)
myls <- list.files(path=filen,pattern="*.R")
myls<-paste0(filen,myls)
invisible(sapply(myls,FUN=source))
}
vars<-c( "SLA","N","Vmax","a400","phiPSII_ind_res","maxNPQ") #
# "SLA","N","CN","Vpmax","Vmax","gsw","a400","phiPSII_ind_res","maxNPQ","endFvFm","initialFvFm"
year <- 2021
segments0 <- 5
nrep <- 20
segment <- 3
repl <- 10
agg <- "sampledHSR" #
dataset<-c("Calibration","Validation")
datatype <- c("raw_data")
datalabel <- c("Raw data") #
ini<-TRUE
for (d in 1:length(datatype)){#
for (inVar in vars){
load(paste0("results/comparePLSR_SVR/PLSR_notuned_model_",datatype[d],"_",agg,year,"_o", segments0*nrep,"_NOC25_",inVar,".RData"))
res.plsr.notuned <- res.rcv.mse
load(paste0("results/comparePLSR_SVR/PLSR_repeatedCV_model_",datatype[d],"_",agg,year,"_o", segments0*nrep,"i",segment*repl,"_",inVar,".RData"))
load(paste0("results/comparePLSR_SVR/tuned_SVR_model_",datatype[d],"_",agg,year,"_o", segments0*nrep,"_",inVar,".RData"))
res.rcv.svr.tuned <- res.rcv.svr
load(paste0("results/comparePLSR_SVR/SVR_model_",datatype[d],"_",agg,year,"_o", segments0*nrep,"_",inVar,".RData"))
for (t in 1:2){
if (ini){
dfr2<-data.frame(score=apply(res.rcv.mse$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d])
dfrmse<-data.frame(score=apply(res.rcv.mse$RMSEP[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d])
dfrmseper<-data.frame(score=apply(res.rcv.mse$RMSEPper[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d])
dfnoc<-data.frame(NoC=apply(res.rcv.mse$bestnoc, 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d])
ini<-FALSE
}else{
dfr2<-rbind(dfr2,data.frame(score=apply(res.rcv.mse$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d]))
dfrmse<-rbind(dfrmse,data.frame(score=apply(res.rcv.mse$RMSEP[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d]))
dfrmseper<-rbind(dfrmseper,data.frame(score=apply(res.rcv.mse$RMSEPper[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d]))
dfnoc<-rbind(dfnoc,data.frame(NoC=apply(res.rcv.mse$bestnoc, 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d]))
}
dfr2<-rbind(dfr2,data.frame(score=apply(res.plsr.notuned$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="FALSE",datatype=datalabel[d]))
dfrmse<-rbind(dfrmse,data.frame(score=apply(res.plsr.notuned$RMSEP[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="FALSE",datatype=datalabel[d]))
dfrmseper<-rbind(dfrmseper,data.frame(score=apply(res.plsr.notuned$RMSEPper[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="FALSE",datatype=datalabel[d]))
dfnoc<-rbind(dfnoc,data.frame(NoC=apply(res.plsr.notuned$bestnoc, 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="FALSE",datatype=datalabel[d]))
dfr2<-rbind(dfr2,data.frame(score=apply(res.rcv.svr.tuned$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="TRUE",datatype=datalabel[d]))
dfrmse<-rbind(dfrmse,data.frame(score=apply(res.rcv.svr.tuned$RMSEP[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="TRUE",datatype=datalabel[d]))
dfrmseper<-rbind(dfrmseper,data.frame(score=apply(res.rcv.svr.tuned$RMSEPper[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="TRUE",datatype=datalabel[d]))
dfnoc<-rbind(dfnoc,data.frame(NoC=apply(res.rcv.svr.tuned$bestnoc, 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="TRUE",datatype=datalabel[d]))
dfr2<-rbind(dfr2,data.frame(score=apply(res.rcv.svr$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="FALSE",datatype=datalabel[d]))
dfrmse<-rbind(dfrmse,data.frame(score=apply(res.rcv.svr$RMSEP[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="FALSE",datatype=datalabel[d]))
dfrmseper<-rbind(dfrmseper,data.frame(score=apply(res.rcv.svr$RMSEPper[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="FALSE",datatype=datalabel[d]))
dfnoc<-rbind(dfnoc,data.frame(NoC=apply(res.rcv.svr$bestnoc, 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="FALSE",datatype=datalabel[d]))
}
}
}
stat_box_data <- function(y) {
return(
data.frame(
y = max(y),  #may need to modify this depending on your data
label = paste(round(median(y),2), '\n')
)
)
}
dfr2$Trait_type <- varclass[match(dfr2$trait,var1)]
dfr2$Trait_type <- factor(dfr2$Trait_type,levels=c("Structural & biochemical","Gas exchange","Chlorophyll fluorescence"))
dfr2$trait <- var2[match(dfr2$trait,var1)] # var1 and var2loaded by  myR/change_var_names.R
dfr2$trait <- factor(dfr2$trait, levels=var2[match(vars,var1)])
dfr2$Model <- factor(dfr2$Model,levels=unique(dfr2$Model))
dfr2$datatype <- factor(dfr2$datatype,levels=datalabel)
ggplot(dfr2[dfr2$data_split=="Validation",], aes(x=trait, y=score,fill=Tuning)) +
geom_boxplot()+
facet_grid(Model ~ Trait_type,scales="free")+
labs(y="Coefficient of determination",x="") +
stat_summary(fun.data = stat_box_data,geom = "text", aes(group=Tuning), size=3,position=position_dodge(0.9)) +
theme(legend.position = "bottom",legend.text = element_text(size=15,face="plain"),legend.title=element_text(size=16,face="bold"),
text = element_text(size = 14,face="bold"),axis.text =  element_text(size = 14,face="bold"),
axis.title=element_text(size=16,face="bold"), strip.text = element_text(size=15,face="bold"))+
scale_fill_brewer(name="Hyperparameter tuning",palette = "Dark2") +
stat_compare_means(label = "p.signif",label.y = -2.4) +
coord_cartesian(ylim =c(-2.5, 0.85))
ini<-TRUE
for (d in 1:length(datatype)){#
for (inVar in vars){
load(paste0("results/comparePLSR_SVR/PLSR_notuned_model_",datatype[d],"_",agg,year,"_o", segments0*nrep,"_NOCdefault_",inVar,".RData"))
res.plsr.notuned <- res.rcv.mse
load(paste0("results/comparePLSR_SVR/PLSR_repeatedCV_model_",datatype[d],"_",agg,year,"_o", segments0*nrep,"i",segment*repl,"_",inVar,".RData"))
load(paste0("results/comparePLSR_SVR/tuned_SVR_model_",datatype[d],"_",agg,year,"_o", segments0*nrep,"_",inVar,".RData"))
res.rcv.svr.tuned <- res.rcv.svr
load(paste0("results/comparePLSR_SVR/SVR_model_",datatype[d],"_",agg,year,"_o", segments0*nrep,"_",inVar,".RData"))
for (t in 1:2){
if (ini){
dfr2<-data.frame(score=apply(res.rcv.mse$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d])
dfrmse<-data.frame(score=apply(res.rcv.mse$RMSEP[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d])
dfrmseper<-data.frame(score=apply(res.rcv.mse$RMSEPper[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d])
dfnoc<-data.frame(NoC=apply(res.rcv.mse$bestnoc, 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d])
ini<-FALSE
}else{
dfr2<-rbind(dfr2,data.frame(score=apply(res.rcv.mse$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d]))
dfrmse<-rbind(dfrmse,data.frame(score=apply(res.rcv.mse$RMSEP[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d]))
dfrmseper<-rbind(dfrmseper,data.frame(score=apply(res.rcv.mse$RMSEPper[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d]))
dfnoc<-rbind(dfnoc,data.frame(NoC=apply(res.rcv.mse$bestnoc, 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="TRUE",datatype=datalabel[d]))
}
dfr2<-rbind(dfr2,data.frame(score=apply(res.plsr.notuned$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="FALSE",datatype=datalabel[d]))
dfrmse<-rbind(dfrmse,data.frame(score=apply(res.plsr.notuned$RMSEP[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="FALSE",datatype=datalabel[d]))
dfrmseper<-rbind(dfrmseper,data.frame(score=apply(res.plsr.notuned$RMSEPper[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="FALSE",datatype=datalabel[d]))
dfnoc<-rbind(dfnoc,data.frame(NoC=apply(res.plsr.notuned$bestnoc, 2, mean),trait=inVar,data_split=dataset[t],Model="PLSR",Tuning="FALSE",datatype=datalabel[d]))
dfr2<-rbind(dfr2,data.frame(score=apply(res.rcv.svr.tuned$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="TRUE",datatype=datalabel[d]))
dfrmse<-rbind(dfrmse,data.frame(score=apply(res.rcv.svr.tuned$RMSEP[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="TRUE",datatype=datalabel[d]))
dfrmseper<-rbind(dfrmseper,data.frame(score=apply(res.rcv.svr.tuned$RMSEPper[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="TRUE",datatype=datalabel[d]))
dfnoc<-rbind(dfnoc,data.frame(NoC=apply(res.rcv.svr.tuned$bestnoc, 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="TRUE",datatype=datalabel[d]))
dfr2<-rbind(dfr2,data.frame(score=apply(res.rcv.svr$R2[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="FALSE",datatype=datalabel[d]))
dfrmse<-rbind(dfrmse,data.frame(score=apply(res.rcv.svr$RMSEP[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="FALSE",datatype=datalabel[d]))
dfrmseper<-rbind(dfrmseper,data.frame(score=apply(res.rcv.svr$RMSEPper[[t]], 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="FALSE",datatype=datalabel[d]))
dfnoc<-rbind(dfnoc,data.frame(NoC=apply(res.rcv.svr$bestnoc, 2, mean),trait=inVar,data_split=dataset[t],Model="SVR",Tuning="FALSE",datatype=datalabel[d]))
}
}
}
stat_box_data <- function(y) {
return(
data.frame(
y = max(y),  #may need to modify this depending on your data
label = paste(round(median(y),2), '\n')
)
)
}
dfr2$Trait_type <- varclass[match(dfr2$trait,var1)]
dfr2$Trait_type <- factor(dfr2$Trait_type,levels=c("Structural & biochemical","Gas exchange","Chlorophyll fluorescence"))
dfr2$trait <- var2[match(dfr2$trait,var1)] # var1 and var2loaded by  myR/change_var_names.R
dfr2$trait <- factor(dfr2$trait, levels=var2[match(vars,var1)])
dfr2$Model <- factor(dfr2$Model,levels=unique(dfr2$Model))
dfr2$datatype <- factor(dfr2$datatype,levels=datalabel)
ggplot(dfr2[dfr2$data_split=="Validation",], aes(x=trait, y=score,fill=Tuning)) +
geom_boxplot()+
facet_grid(Model ~ Trait_type,scales="free")+
labs(y="Coefficient of determination",x="") +
stat_summary(fun.data = stat_box_data,geom = "text", aes(group=Tuning), size=3,position=position_dodge(0.9)) +
theme(legend.position = "bottom",legend.text = element_text(size=15,face="plain"),legend.title=element_text(size=16,face="bold"),
text = element_text(size = 14,face="bold"),axis.text =  element_text(size = 14,face="bold"),
axis.title=element_text(size=16,face="bold"), strip.text = element_text(size=15,face="bold"))+
scale_fill_brewer(name="Hyperparameter tuning",palette = "Dark2") +
stat_compare_means(label = "p.signif",label.y = -2.4) +
coord_cartesian(ylim =c(-2.5, 0.85))
apply(res.rcv.mse$R2[[t]], 2, mean)
apply(res.rcv.svr.tuned$R2[[t]], 2, mean)
apply(res.rcv.svr$R2[[t]], 2, mean)
ggsave("Figures/SF_sec3.1.png",width = 10, height = 7)
